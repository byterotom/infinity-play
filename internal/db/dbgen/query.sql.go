// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addGame = `-- name: AddGame :exec
INSERT INTO
    game(id, name, description, technology, game_url)
VALUES
    ($1, $2, $3, $4, $5)
`

type AddGameParams struct {
	ID          string
	Name        string
	Description string
	Technology  string
	GameUrl     pgtype.Text
}

func (q *Queries) AddGame(ctx context.Context, arg AddGameParams) error {
	_, err := q.db.Exec(ctx, addGame,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Technology,
		arg.GameUrl,
	)
	return err
}

const addGameTags = `-- name: AddGameTags :exec
INSERT INTO
    game_tags(game_id, tag_id)
VALUES
    ($1, $2)
`

type AddGameTagsParams struct {
	GameID string
	TagID  int32
}

func (q *Queries) AddGameTags(ctx context.Context, arg AddGameTagsParams) error {
	_, err := q.db.Exec(ctx, addGameTags, arg.GameID, arg.TagID)
	return err
}

const addNewTags = `-- name: AddNewTags :exec
INSERT INTO
    tags(tag)
VALUES
    ($1) ON CONFLICT DO NOTHING
`

func (q *Queries) AddNewTags(ctx context.Context, tag string) error {
	_, err := q.db.Exec(ctx, addNewTags, tag)
	return err
}

const deleteGameById = `-- name: DeleteGameById :exec
DELETE FROM
    game
WHERE
    id = $1
`

func (q *Queries) DeleteGameById(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteGameById, id)
	return err
}

const getAdminIdByCredentials = `-- name: GetAdminIdByCredentials :one
SELECT 
    id 
FROM 
    admin 
WHERE 
    username=$1 AND password=$2
`

type GetAdminIdByCredentialsParams struct {
	Username string
	Password string
}

func (q *Queries) GetAdminIdByCredentials(ctx context.Context, arg GetAdminIdByCredentialsParams) (int32, error) {
	row := q.db.QueryRow(ctx, getAdminIdByCredentials, arg.Username, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getGameByName = `-- name: GetGameByName :one
SELECT
    id, name, description, technology, release_date, likes, votes, game_url
FROM
    game
WHERE
    name = $1
`

func (q *Queries) GetGameByName(ctx context.Context, name string) (Game, error) {
	row := q.db.QueryRow(ctx, getGameByName, name)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Technology,
		&i.ReleaseDate,
		&i.Likes,
		&i.Votes,
		&i.GameUrl,
	)
	return i, err
}

const getGameIdByName = `-- name: GetGameIdByName :one
SELECT
    id
FROM
    game
WHERE
    name = $1
`

func (q *Queries) GetGameIdByName(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, getGameIdByName, name)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getGamesByPattern = `-- name: GetGamesByPattern :many
SELECT
    id, name, description, technology, release_date, likes, votes, game_url
FROM
    game
WHERE
    $1::text IS NOT NULL
    AND (
        name ILIKE '%' || $1::text || '%'
        OR description ILIKE '%' || $1::text || '%'
    )
`

func (q *Queries) GetGamesByPattern(ctx context.Context, dollar_1 string) ([]Game, error) {
	rows, err := q.db.Query(ctx, getGamesByPattern, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Technology,
			&i.ReleaseDate,
			&i.Likes,
			&i.Votes,
			&i.GameUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGamesByTag = `-- name: GetGamesByTag :many
SELECT
    g.id, g.name, g.description, g.technology, g.release_date, g.likes, g.votes, g.game_url
FROM
    game AS g
    JOIN game_tags AS gt ON g.id = gt.game_id
    JOIN tags AS t ON gt.tag_id = t.tag_id
WHERE
    t.tag = $1
`

func (q *Queries) GetGamesByTag(ctx context.Context, tag string) ([]Game, error) {
	rows, err := q.db.Query(ctx, getGamesByTag, tag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Technology,
			&i.ReleaseDate,
			&i.Likes,
			&i.Votes,
			&i.GameUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNewGames = `-- name: GetNewGames :many
SELECT
    id, name, description, technology, release_date, likes, votes, game_url
FROM
    game
ORDER BY
    release_date
LIMIT
    10
`

func (q *Queries) GetNewGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, getNewGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Technology,
			&i.ReleaseDate,
			&i.Likes,
			&i.Votes,
			&i.GameUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPopularGames = `-- name: GetPopularGames :many
SELECT
    id, name, description, technology, release_date, likes, votes, game_url
FROM
    game
ORDER BY
    votes DESC
LIMIT
    10
`

func (q *Queries) GetPopularGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, getPopularGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Technology,
			&i.ReleaseDate,
			&i.Likes,
			&i.Votes,
			&i.GameUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTagIdByName = `-- name: GetTagIdByName :one
SELECT
    tag_id
FROM
    tags
WHERE
    tag = $1
`

func (q *Queries) GetTagIdByName(ctx context.Context, tag string) (int32, error) {
	row := q.db.QueryRow(ctx, getTagIdByName, tag)
	var tag_id int32
	err := row.Scan(&tag_id)
	return tag_id, err
}

const getTopRatedGames = `-- name: GetTopRatedGames :many
SELECT
    id, name, description, technology, release_date, likes, votes, game_url
FROM
    game
ORDER BY
    (likes :: float / NULLIF(votes, 0)) DESC
LIMIT
    10
`

func (q *Queries) GetTopRatedGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, getTopRatedGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Technology,
			&i.ReleaseDate,
			&i.Likes,
			&i.Votes,
			&i.GameUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
