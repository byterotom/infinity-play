// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package dbgen

import (
	"context"
	"database/sql"
)

const addGame = `-- name: AddGame :one
INSERT INTO
    Game(id, name, description, technology, game_url)
VALUES
    (?, ?, ?, ?, ?) RETURNING id, name, description, technology, release_date, likes, votes, game_url
`

type AddGameParams struct {
	ID          string
	Name        string
	Description string
	Technology  string
	GameUrl     sql.NullString
}

func (q *Queries) AddGame(ctx context.Context, arg AddGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, addGame,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Technology,
		arg.GameUrl,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Technology,
		&i.ReleaseDate,
		&i.Likes,
		&i.Votes,
		&i.GameUrl,
	)
	return i, err
}

const deleteById = `-- name: DeleteById :one
DELETE FROM
    Game
where
    id = ? RETURNING id, name, description, technology, release_date, likes, votes, game_url
`

func (q *Queries) DeleteById(ctx context.Context, id string) (Game, error) {
	row := q.db.QueryRowContext(ctx, deleteById, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Technology,
		&i.ReleaseDate,
		&i.Likes,
		&i.Votes,
		&i.GameUrl,
	)
	return i, err
}

const getAll = `-- name: GetAll :many
SELECT
    id, name, description, technology, release_date, likes, votes, game_url
FROM
    Game
`

func (q *Queries) GetAll(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Technology,
			&i.ReleaseDate,
			&i.Likes,
			&i.Votes,
			&i.GameUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIdByName = `-- name: GetIdByName :one
SELECT
    id
FROM
    Game
WHERE
    name = ?
`

func (q *Queries) GetIdByName(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRowContext(ctx, getIdByName, name)
	var id string
	err := row.Scan(&id)
	return id, err
}
